{"remainingRequest":"C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\src\\views\\Operation.vue?vue&type=template&id=51e2911d&scoped=true&","dependencies":[{"path":"C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\src\\views\\Operation.vue","mtime":1658322787851},{"path":"C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658047725076},{"path":"C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1658047726934},{"path":"C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658047725076},{"path":"C:\\Users\\Admin\\Desktop\\DuxWeb\\duxWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":1658047726298}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}