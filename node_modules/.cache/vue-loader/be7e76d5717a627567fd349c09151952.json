{"remainingRequest":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\NAREK\\Desktop\\duxWeb\\src\\views\\Gaming.vue?vue&type=template&id=439b9769&scoped=true&","dependencies":[{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\src\\views\\Gaming.vue","mtime":1658053811544},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658053805099},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1658053810896},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658053805099},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":1658053810895}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uICgpIHsKICB2YXIgX3ZtID0gdGhpcwogIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciIgfSwgWwogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkZXJfcGFydCIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogIm1lbnUiIH0sIFtfYygiSGVhZGVyIildLCAxKSwKICAgICAgX3ZtLl9tKDApLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJwIiB9LCBbCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJicmF2ZSIgfSwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJpIGJpLWNpcmNsZS1maWxsIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICB3aWR0aDogIjIwIiwKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjAiLAogICAgICAgICAgICAgICAgICBmaWxsOiAiIzJGNUJEOCIsCiAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMTYgMTYiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfYygiY2lyY2xlIiwgeyBhdHRyczogeyBjeDogIjgiLCBjeTogIjgiLCByOiAiOCIgfSB9KV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX3ZtLl92KCJXaHkgSXQgTWF0dGVycyAiKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAiYmx1ZSIgfSwgW192bS5fdigiUmVzcG9uc2libGUiKV0pLAogICAgICAgICAgX3ZtLl92KCIgR2FtaW5nICIpLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0pLAogICAgX3ZtLl9tKDEpLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJsaXN0cyIgfSwgWwogICAgICBfdm0uX20oMiksCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudF9faXRlbSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiaSBiaS1jaXJjbGUtZmlsbCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyMCIsCiAgICAgICAgICAgICAgICAgIGhlaWdodDogIjIwIiwKICAgICAgICAgICAgICAgICAgZmlsbDogIiMyRjVCRDgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDE2IDE2IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImNpcmNsZSIsIHsgYXR0cnM6IHsgY3g6ICI4IiwgY3k6ICI4IiwgcjogIjgiIH0gfSldCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIkhPVyBUTyBMSU1JVCBZT1VSIExPU1NFUyBBTkQgU1BFTkRJTkciKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiV2Ugb2ZmZXIgYSBQZXJzb25hbCBMaW1pdHMgZmVhdHVyZS4gSGVyZSB5b3UgY2FuIHNldCBsaW1pdHMgb24gdGhlIGFtb3VudCB5b3UgZGVwb3NpdCwgbG9zZSwgd2FnZXIsIGFuZCBzcGVuZCBpbiBvbmUgZ2FtZS4gT3IgZXZlbiBvbiB5b3VyIG92ZXJhbGwgYWNjb3VudCBhY3Rpdml0eS4gWW91IGNhbiBjaGFuZ2UgdGhlc2UgbGltaXRzIGF0IGFueSB0aW1lLiBDdXN0b21lcnMgaGF2ZSB0aGUgZmxleGliaWxpdHkgb2YgaW5jcmVhc2luZy9kZWNyZWFzaW5nIHRoZWlyIHB1cmNoYXNlIGxpbWl0cyBpbiBvcmRlciB0byBjb250cm9sIHRoZWlyIGxldmVsIGJ5IGFkaGVyaW5nIHRvIEtZQyBwcm9jZXNzZXMgaW4gYWNjb3JkYW5jZSB0byB0aGUgcHJvamVjdC4gUmVkdWNpbmcgdGhlIGxpbWl0IHdpbGwgdGFrZSBlZmZlY3QgaW1tZWRpYXRlbHksIGJ1dCBhbiBpbmNyZWFzZSBpbiBhbnkgbGltaXQgd2lsbCBoYXBwZW4gYWZ0ZXIgZW1haWwgY29uZmlybWF0aW9uLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudF9faXRlbSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiaSBiaS1jaXJjbGUtZmlsbCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyMCIsCiAgICAgICAgICAgICAgICAgIGhlaWdodDogIjIwIiwKICAgICAgICAgICAgICAgICAgZmlsbDogIiMyRjVCRDgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDE2IDE2IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImNpcmNsZSIsIHsgYXR0cnM6IHsgY3g6ICI4IiwgY3k6ICI4IiwgcjogIjgiIH0gfSldCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIkNvb2xpbmctT2ZmIFBlcmlvZCIpXSksCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJoNCIsIFsKICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICJZb3UgY2FuIHNldCBhIGNvb2xpbmctb2ZmIHBlcmlvZCBmb3IgMSB3ZWVrLCAxIG1vbnRoLCAzIG1vbnRocywgb3IgNiBtb250aHMuIFdoZW4gdGhpcyBsaW1pdCBpcyBpbiBlZmZlY3QsIHRoZSBzeXN0ZW0gbWF5IGxpbWl0IHRoZSBwb3NzaWJpbGl0eSBvZiBtYWtpbmcgYSBkZXBvc2l0IGFuZCBjbG9zZSBhY2Nlc3MgdG8gYWxsIHByb21vdGlvbmFsIG9mZmVycy4gWW91IGNhbiBzdGlsbCB3aXRoZHJhdyBhbnkgcmVtYWluaW5nIGZ1bmRzIGR1cmluZyB0aGlzIHBlcmlvZC4gVGhpcyBDb29saW5nLU9mZiBwZXJpb2QgaXMgaW5zdGFudGx5IGFwcGxpZWQgdG8geW91ciBhY2NvdW50IGFuZCB3aGVuIGl0IGV4cGlyZXMgeW91ciBhY2NvdW50IHdpbGwgYmUgcmUtYWN0aXZhdGVkIGF1dG9tYXRpY2FsbHkuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50X19pdGVtIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJpIGJpLWNpcmNsZS1maWxsIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICB3aWR0aDogIjIwIiwKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjAiLAogICAgICAgICAgICAgICAgICBmaWxsOiAiIzJGNUJEOCIsCiAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMTYgMTYiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfYygiY2lyY2xlIiwgeyBhdHRyczogeyBjeDogIjgiLCBjeTogIjgiLCByOiAiOCIgfSB9KV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiU2VsZi1FeGNsdXNpb24iKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiWW91IGNhbiBzZXQgYSBTZWxmLUV4Y2x1c2lvbiBMaW1pdCBmb3IgNiBtb250aHMsIDkgbW9udGhzLCBvciAxIHllYXIuIFdoZW4geW91IGRvIHRoaXMgeW91ciBQbGF5ZXIgQWNjb3VudCB3aWxsIGJlIGltbWVkaWF0ZWx5IGRpc2FibGVkIGFuZCB5b3Ugd2lsbCBiZSBleGNsdWRlZCBmcm9tIGFsbCBvZiBvdXIgcHJvbW90aW9uYWwgb2ZmZXJzIGZvciB0aGUgcGVyaW9kIHlvdSBhcmUgZXhjbHVkZWQuIFlvdSBjYW5ub3QgZGVwb3NpdCBvciB3aXRoZHJhdyBmdW5kcyB3aGVuIHRoaXMgZXhjbHVzaW9uIGlzIGFjdGl2ZS4gV2hlbiB0aGlzIGV4Y2x1c2lvbiBleHBpcmVzIHlvdXIgYWNjb3VudCB3aWxsIG5vdCBiZSBhdXRvbWF0aWNhbGx5IHJlLWFjdGl2YXRlZC4gV2hlbiB5b3Ugc2V0IGEgU2VsZi1leGNsdXNpb24gaXQgbGV0cyB1cyBrbm93IHRoYXQgd2UgbmVlZCB0byBkbyBldmVyeXRoaW5nIHdlIGNhbiB0byBibG9jayB5b3VyIGFjY2VzcyB0byB5b3VyIGFjY291bnQgYW5kIG1ha2Ugc3VyZSB0aGF0IHlvdSByZWNlaXZlIG5vIHByb21vdGlvbmFsIG1hdGVyaWFscyB3aGF0c29ldmVyLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudF9faXRlbSIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgInN2ZyIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJiaSBiaS1jaXJjbGUtZmlsbCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICB4bWxuczogImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiwKICAgICAgICAgICAgICAgICAgd2lkdGg6ICIyMCIsCiAgICAgICAgICAgICAgICAgIGhlaWdodDogIjIwIiwKICAgICAgICAgICAgICAgICAgZmlsbDogIiMyRjVCRDgiLAogICAgICAgICAgICAgICAgICB2aWV3Qm94OiAiMCAwIDE2IDE2IiwKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX2MoImNpcmNsZSIsIHsgYXR0cnM6IHsgY3g6ICI4IiwgY3k6ICI4IiwgcjogIjgiIH0gfSldCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF9jKCJoMyIsIFtfdm0uX3YoIkxFVOKAmVMgU0VFIFNPTUUgSUQiKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiV2Ugb25seSBhY2NlcHQgcGxheWVycyB3aG8gYXJlIGF0IGxlYXN0IDE4IHllYXJzIG9sZCBhbmQgdXNlIGFsbCBhdmFpbGFibGUgbWV0aG9kcyB3ZSBoYXZlIHRvIHN0b3AgYW55IG1pbm9ycyBmcm9tIHJlZ2lzdGVyaW5nIGFuZCBwbGF5aW5nLiBXZSBhbHdheXMgcmVzZXJ2ZSB0aGUgcmlnaHQgdG8gYXNrIGZvciBhbnkgcHJvb2Ygb2YgaWRlbnRpdHkgYW5kIGlmIHRoZSBwbGF5ZXIgaXMgbm90IDE4KyB0aGVpciBhY2Nlc3MgdG8gb3VyIGNhc2lub3Mgd2lsbCBiZSBkZW5pZWQgaW1tZWRpYXRlbHkuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgXSksCiAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50X19pdGVtIiB9LCBbCiAgICAgICAgICBfYygiZGl2IiwgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAic3ZnIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJpIGJpLWNpcmNsZS1maWxsIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHhtbG5zOiAiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciLAogICAgICAgICAgICAgICAgICB3aWR0aDogIjIwIiwKICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiMjAiLAogICAgICAgICAgICAgICAgICBmaWxsOiAiIzJGNUJEOCIsCiAgICAgICAgICAgICAgICAgIHZpZXdCb3g6ICIwIDAgMTYgMTYiLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgIFtfYygiY2lyY2xlIiwgeyBhdHRyczogeyBjeDogIjgiLCBjeTogIjgiLCByOiAiOCIgfSB9KV0KICAgICAgICAgICAgKSwKICAgICAgICAgICAgX2MoImgzIiwgW192bS5fdigiT1VSIFJFQUxJVFkgQ0hFQ0siKV0pLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygiaDQiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiVGltZSBmbGllcyB3aGVuIHlvdSdyZSBoYXZpbmcgZnVuLCBzbyB3ZSBzZW5kIGhvdXJseSBub3RpZmljYXRpb25zIGluLWdhbWUgdG8gcmVtaW5kIHlvdSBvZiB5b3VyIENhc2lubyBleHBlbmRpdHVyZS4gUmVnYXJkbGVzcyBvZiBob3cgbWFueSBnYW1lcyB5b3UgYXJlIHBsYXlpbmcsIHdlIHdpbGwgYWx3YXlzIGxldCB5b3Uga25vdyBldmVyeSBob3VyLiBUaGlzIGlzIHRvIGhlbHAgeW91IHJlZmxlY3Qgb24geW91ciBiZXRzIGFuZCBwZXJoYXBzIGNvbnNpZGVyIHN0b3BwaW5nIGZvciBhIHdoaWxlLiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0pLAogICAgX3ZtLl9tKDMpLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmb290ZXIiIH0sIFtfYygiRm9vdGVyIildLCAxKSwKICBdKQp9CnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJpbWFnZXMiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNTdHlsZTogeyBmbG9hdDogInJpZ2h0IiB9LAogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9nYW1pbmcvaGVhZGVyLXBob3RvLnN2ZyIpIH0sCiAgICAgIH0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAibGVhcm4iIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9pbWFnZXMvZ2FtaW5nL2xlYXJuLnN2ZyIpIH0sCiAgICAgICAgfSksCiAgICAgIF0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRlbnQiIH0sIFsKICAgICAgICBfYygicCIsIFsKICAgICAgICAgIF9jKCJzcGFuIiwgeyBzdGF0aWNDbGFzczogInRleHQtcGFydCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIkdhbWJsaW5nIHNob3VsZCBhbHdheXMgYmUgc2VlbiBhcyBlbnRlcnRhaW5tZW50IGFuZCBub3RoaW5nIGVsc2UuIFVuZm9ydHVuYXRlbHksIHNvbWV0aW1lcyBwZW9wbGUgY2FuIHRha2UgaXQgdG9vIGZhciBhbmQgcG90ZW50aWFsbHkgbG9zZSBjb250cm9sIG9mIHRoZWlyIGJldHRpbmcuIFlvdSBzaG91bGQgbmV2ZXIgY29uc2lkZXIgZ2FtYmxpbmcgYXMgYSBzb3VyY2Ugb2YgaW5jb21lIG9yIGEgY2hhbmNlIHRvIHJlY292ZXIgZnJvbSBkZWJ0LiBBbHdheXMga2VlcCB0cmFjayBvZiB0aGUgdGltZSBhbmQgbW9uZXkgeW91IHNwZW50IG9uIGdhbWJsaW5nLCBjaGVjayB0aGlzIHdpdGggeW91cnNlbGYgZXZlcnkgZGF5LiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1wYXJ0IiB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiSWYgeW91IGFyZSBzcGVuZGluZyBtb3JlIG1vbmV5IG9yIHRpbWUgb24gZ2FtYmxpbmcgdGhhbiB5b3Ugd291bGQgbGlrZSwgcGxlYXNlIGNvbnNpZGVyIHRoZSBzZXZlcmFsIG1lYXN1cmVzIHRoYXQgY2FuIGhlbHAsIHNldCBQZXJzb25hbCBMaW1pdHMgb24gdGhlIHRpbWUgYW5kIG1vbmV5IHNwZW50LCBjb25zaWRlciBhIFNlbGYtRXhjbHVzaW9uLCBhbmQgc2VlayBoZWxwIGFuZCBzdXBwb3J0IGZyb20gdGhlIHRydXN0ZWQgaW5kZXBlbmRlbnQgYm9kaWVzIGF2YWlsYWJsZSB0byB5b3UuIgogICAgICAgICAgICApLAogICAgICAgICAgXSksCiAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LXBhcnQiIH0sIFsKICAgICAgICAgICAgX3ZtLl92KCIgWW91IGNhbiBhbHdheXMgdGFrZSB0aGlzIGdhbWJsaW5nICIpLAogICAgICAgICAgICBfYygic3BhbiIsIHsgc3RhdGljQ2xhc3M6ICJibHVlIiB9LCBbX3ZtLl92KCIgYWRkaWN0aW9uIHF1aXoiKV0pLAogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiB0byBzZWUgaWYgeW91J3JlIHNob3dpbmcgYW55IHNpZ25zIG9mIGEgZ2FtYmxpbmcgYWRkaWN0aW9uLiAiCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICBdKSwKICAgICAgXSksCiAgICBdKQogIH0sCiAgZnVuY3Rpb24gKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJ0aXRsZSIgfSwgWwogICAgICBfYygiaW1nIiwgewogICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9nYW1pbmcvaG93aXR3b3JrLnN2ZyIpIH0sCiAgICAgIH0pLAogICAgXSkKICB9LAogIGZ1bmN0aW9uICgpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAic2Vla2luZyIgfSwgWwogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInRpdGxlIiB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9nYW1pbmcvc2Vla2luZy10aXRsZS5zdmciKSB9LAogICAgICAgIH0pLAogICAgICBdKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9nYW1pbmcvc2Vla2luZy1iZy5zdmciKSB9LAogICAgICAgIH0pLAogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInNtYWxsLWJnIiwKICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2ltYWdlcy9nYW1pbmcvc2Vla2luZy1iZzMyMC5zdmciKSB9LAogICAgICAgIH0pLAogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAidGV4dCIgfSwgWwogICAgICAgICAgX2MoInAiLCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiUGxlYXNlIGNvbnRhY3QgYW55IG9mIHRoZSBmb2xsb3dpbmcgb3JnYW5pemF0aW9ucyBmb3IgY29uc3VsdGF0aW9uIGFuZCBzdXBwb3J0OiIKICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgIF92bS5fdigiR2FtYmxlcnMgQW5vbnltb3VzICIpLAogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiYSIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJibHVlIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICJodHRwczovL3d3dy5nYW1ibGVyc2Fub255bW91cy5vcmcvZ2EvIiB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiaHR0cDovL3d3dy5nYW1ibGVyc2Fub255bW91cy5vcmcvZ2EvIildCiAgICAgICAgICAgICksCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJzcGFuIiwgWwogICAgICAgICAgICBfdm0uX3YoIkdhbUNhcmUgIiksCiAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJsdWUiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogImh0dHBzOi8vd3d3LmdhbWJsZXJzYW5vbnltb3VzLm9yZy9nYS8iIH0sCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbX3ZtLl92KCJodHRwczovL3d3dy5nYW1jYXJlLm9yZy51ay8iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInNwYW4iLCBbCiAgICAgICAgICAgIF92bS5fdigiR2FtYmxpbmcgVGhlcmFweSAiKSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImEiLAogICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYmx1ZSIsCiAgICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiaHR0cHM6Ly93d3cuZ2FtY2FyZS5vcmcudWsvIiB9LAogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgW192bS5fdigiaHR0cHM6Ly93d3cuZ2FtYmxpbmd0aGVyYXB5Lm9yZy8iKV0KICAgICAgICAgICAgKSwKICAgICAgICAgIF0pLAogICAgICAgIF0pLAogICAgICBdKSwKICAgIF0pCiAgfSwKXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}