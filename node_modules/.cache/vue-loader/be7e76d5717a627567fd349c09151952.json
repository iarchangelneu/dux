{"remainingRequest":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\NAREK\\Desktop\\duxWeb\\src\\views\\Gaming.vue?vue&type=template&id=439b9769&scoped=true&","dependencies":[{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\src\\views\\Gaming.vue","mtime":1658270260950},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658053805099},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1658053810896},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1658053805099},{"path":"C:\\Users\\NAREK\\Desktop\\duxWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":1658053810895}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}